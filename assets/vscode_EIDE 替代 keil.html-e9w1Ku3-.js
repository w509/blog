import{_ as a,c as t,a as p,b as d,w as c,r as i,o as s,d as r}from"./app-CubtBdAa.js";const n={};function l(h,e){const o=i("VPCard");return s(),t("div",null,[e[1]||(e[1]=p('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>作为一名蒟蒻，笔者在初中打 NOIP 时就难以忍受 Dev-cpp 的丑陋界面，所以使用 vscode 实属习惯</p><p>竞赛并不能依赖代码补全，但在嵌入式的学习中，代码补全功能还是非常重要的</p><p>所以使用具有更现代化的代码编辑界面及更完善的代码补全功能的编辑器是一种更好的选择</p><p>毕竟 Keil 的代码补全功能实在拉跨，并且每次补全都会卡上一小会儿</p><p>不过笔者在写下这篇文章时对嵌入式调试的理解并不透彻，还没能领悟被捧得很高的 Keil 的调试魅力</p><p>但使用 eide 及其配套插件也能实现简单的调试功能，所以请放心食用</p><h2 id="准备" tabindex="-1"><a class="header-anchor" href="#准备"><span>准备</span></a></h2><p>如果你还没完成 Keil 的部署，笔者仍然建议使用 Keil 进行初步的学习, 以便更好地理解嵌入式代码编写到烧录的基本流程</p><p>另外就是，eide 可以使用 Keil 的工具链，本文也使用 Keil 的工具链进行编译</p><p>这同时也保证，基于 MDKARM 的代码可以继续在 eide 中使用</p><h3 id="安装-keil" tabindex="-1"><a class="header-anchor" href="#安装-keil"><span>安装 Keil</span></a></h3><p>如果你还没有安装 Keil，请自行移步搜索 Keil 的安装教程，当然，指的不是免费的社区版</p><h3 id="vscode" tabindex="-1"><a class="header-anchor" href="#vscode"><span>vscode</span></a></h3><p>这话略显多余了，但还是要说一下，vscode 的安装可以直接去官网下载</p><h4 id="安装插件" tabindex="-1"><a class="header-anchor" href="#安装插件"><span>安装插件</span></a></h4><p>分别搜索以下插件并安装：</p><ul><li>Embedded IDE</li><li>C/C++</li><li>Cortex-Debug</li><li>Serial Monitor（串口监视器，可选）</li><li>RTOS Views（rtos系统视图，可选）</li></ul><p>虽然相对而言 clangd 的智能补全和包含库跳转功能会更好用一点，不过 EIDE 文档更推荐使用 C/C++</p><p>并且根据其<a href="https://em-ide.com/zh-cn/docs/notice/cpptools_cfg" target="_blank" rel="noopener noreferrer">官方文档</a>所言：</p>',20)),d(o,null,{default:c(()=>[...e[0]||(e[0]=[r("p",null,"EIDE 将在内部使用 cpptool CustomConfiguraionProvider api 为你的项目自动进行配置，C/C++ 插件将根据 EIDE 提供的配置为你的项目提供补全，智能感知等功能。 因此 不要手动 新建，编写 c_cpp_properties.json 文件，如果你这样做了，C/C++ 插件将优先使用 c_cpp_properties.json，如果你的 c_cpp_properties.json 存在错误，那么项目的 补全，智能感知等功能将不能正常工作。",-1)])]),_:1}),e[2]||(e[2]=p('<p>因此使用 C/C++ 插件无需手动配置任何文件，而 clangd 还需配置 <code>compile_commands.json</code> 文件，可以通过 CMake 生成，感兴趣可以自行尝试</p><p>另外就是去设置里修改一下 EIDE 的设置 <code>Repository: Use Proxy</code>，取消勾选</p><p>这个主要是因为 EIDE 能够一键安装实用工具，但是加速 github 的功能在使用时完全连接不上</p><p>看过相关 issue 反映是 bug，所以建议取消勾选，不过读者在看到这篇文章时说不定已经修复了</p><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h2><p>习惯而言，用 CubeMX 生成代码后，在 EIDE 中导入生成的 <code>.uvprojx</code> 项目即可，和直接双击打开 Keil 没有区别</p><p>但是需要手动配置 Keil 的已启动选项，所以在你还看不懂这个句子，建议先使用 Keil 打开一次项目，然后再导入 EIDE</p><p>在 EIDE 操作栏中设置工具链，找到 Keil MDK，设置 UV4 工具链路径，路径应该是类似于 <code>C:\\...\\Keil_v5\\UV4\\UV4.exe</code> 的形式</p><p>只要你有用 Keil 打开过一次项目，EIDE 就会自动识别 Keil 已经配置好的项目编译选项，不再需要手动调整</p><p>接下来就是放入我们的代码，只需要右键项目资源就可以实现添加文件夹等操作</p><p>在 C/C++ 属性中，添加包含目录</p><p>构建配置选择 AC6，烧录配置选择 STLink 或是其他你手上有的烧录器</p><p>最后写完代码后，点击构建，烧录，均和 Keil 的操作一致</p><p>这里提供一个便捷操作，在快捷键菜单中，搜索 <code>EIDE: Build and Flash</code>，将其绑定一个快捷键，这样就可以一键编译并烧录代码了</p><h2 id="调试" tabindex="-1"><a class="header-anchor" href="#调试"><span>调试</span></a></h2><p>在我们设置工具链的下方，安装实用工具，点击，安装 OpenOCD，会自动完成并配置目录，过程稍久，可以自行更换网络环境</p><p>另外来到设置里，我们需要勾选设置 <code>Axf To Elf</code></p><p>这样就能将生成的 Axf 文件转换为 Elf 文件，方便调试器使用</p><p>右键项目资源，选择调试配置，生成调试器配置模板，这里选择 OpenOCD，会自动生成调试器模板</p><p>接下来就是正常调试了</p><h2 id="后文" tabindex="-1"><a class="header-anchor" href="#后文"><span>后文</span></a></h2><p>需要说明的是，EIDE 是目前笔者尝试过在 vscode 中诸多工具中最好配置的一个，这是建立在使用 Keil 工具链的基础上的</p><p>但是正如它的名字所示，它仍然是一个 IDE，虽然是一个插件但也相对臃肿</p><p>这里给想要更进一步获得纯净体验（<s>瞎搞</s>）的读者提供一些方向</p><p>如果你想删了 Keil 的话，可以尝试使用 <code>STM32CubeIDE</code>，这是最简单的</p><p>如果你想要更简单的配置 UI，<code>platformIO</code> 也是一个不错的选择</p><p>如果你不想用上述两者，可以尝试在 vscode 中配置 <code>Cmake + ninja + clangd + openocd</code> 工具链，不过这需要你对配置环境有更深的理解，虽然视频不少，但在完全摸不着北的情况下依葫芦画瓢还是很难的，如果如此配置的话建议同时学习 vscode 的 <code>task.json</code> 的配置，这样可以更好地自动化编译烧录的过程</p><p>如果你想换个调试器，可以尝试 <code>probe-rs</code>，这是一个基于 Rust 的开源调试工具，需要安装 Rust 环境，相比于 <code>OpenOCD</code> 速度更快，并且对调试原生支持，不再需要安装 <code>Cortex-Debug</code> 来调试。不过在本文行文时教程还不足，需要自己摸索</p><p>虽然以上和我们学习的重心相悖，但是在配置过程中能更好地理解各类工具的区别，进而选择最适合自己的工具链</p>',29))])}const m=a(n,[["render",l]]),D=JSON.parse(`{"path":"/vscode/vscode_EIDE%20%E6%9B%BF%E4%BB%A3%20keil.html","title":"vscode+EIDE 替代 Keil","lang":"zh-CN","frontmatter":{"title":"vscode+EIDE 替代 Keil","createTime":"2025/05/30 16:58:45","description":"前言 作为一名蒟蒻，笔者在初中打 NOIP 时就难以忍受 Dev-cpp 的丑陋界面，所以使用 vscode 实属习惯 竞赛并不能依赖代码补全，但在嵌入式的学习中，代码补全功能还是非常重要的 所以使用具有更现代化的代码编辑界面及更完善的代码补全功能的编辑器是一种更好的选择 毕竟 Keil 的代码补全功能实在拉跨，并且每次补全都会卡上一小会儿 不过笔者在...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vscode+EIDE 替代 Keil\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-20T05:41:36.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://blog.w509.xyz/vscode/vscode_EIDE%20%E6%9B%BF%E4%BB%A3%20keil.html"}],["meta",{"property":"og:site_name","content":"w509's blog"}],["meta",{"property":"og:title","content":"vscode+EIDE 替代 Keil"}],["meta",{"property":"og:description","content":"前言 作为一名蒟蒻，笔者在初中打 NOIP 时就难以忍受 Dev-cpp 的丑陋界面，所以使用 vscode 实属习惯 竞赛并不能依赖代码补全，但在嵌入式的学习中，代码补全功能还是非常重要的 所以使用具有更现代化的代码编辑界面及更完善的代码补全功能的编辑器是一种更好的选择 毕竟 Keil 的代码补全功能实在拉跨，并且每次补全都会卡上一小会儿 不过笔者在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-20T05:41:36.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-20T05:41:36.000Z"}]]},"readingTime":{"minutes":5.16,"words":1548},"git":{"createdTime":1748620544000,"updatedTime":1750398096000},"autoDesc":true,"filePathRelative":"vscode/vscode+EIDE 替代 keil.md","headers":[],"categoryList":[{"id":"e2fc80","sort":10004,"name":"vscode"}]}`);export{m as comp,D as data};
